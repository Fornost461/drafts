#!/usr/bin/env sh

default_ext='mp4'

# maximal number of attempts to find an available filename
max_attempts=100

# substitute for slashes in titles
slash_substitute='-'

m3u8_mode='never'
#~ m3u8_mode='always'
#~ m3u8_mode='ask_every_time'

# for m3u8 mode
#~ ts_prefix='seg-'
#~ ts_suffix='-v1'
ts_prefix='480p.mp4-n_'
ts_suffix='_0_0'

# determine $index and $url_end
_get_ts_file_index()
{
    url_end="$(basename "${1}")"
    url_end="${url_end#${ts_prefix}}"
    index="${url_end%${ts_suffix}*.ts}"
    url_end="${url_end#${index}}"
}

# test parsed extension stored in $ext
_ext_seems_good()
{
    result='false'
    if [ "${#ext}" -ge 1 ] && [ "${#ext}" -le 4 ]
    then
        case "${ext}" in
            (*[!a-zA-Z0-9]*);;
            (smil|com);;
            (*) # seems good
                result='true'
                ;;
        esac
    fi
    "${result}"
}

help=false
if [ "${#}" -gt 0 ]
then
    if [ "${#}" -ge 2 ] || [ "${1}" = '-h' ] || [ "${1}" = '--help' ]
    then
        help=true
        printf '%s\n' 'The purpose of this interactive script is to download a video to the current working directory.' \
            'Anytime you are asked for information, you can exit the script with the shortcut <ctrl-c>.'
    else
        title="${1}"
    fi
fi

loop0=true
while "${loop0}"
do
    if "${help}"
    then
        printf '%s\n' 'The title is the desired filename without its extension.' \
            "Any slash in the title will be replaced with the character ‘ ${slash_substitute} ’." \
            'If you leave the title empty, a random number will be used instead.'
    fi

    if [ -z "${title}" ]
    then
        printf 'Title: '
        read title
    else
        loop0=false
    fi

    if [ -n "${title}" ]
    then
        # replace slashes in filename
        title="$(tr '/' "${slash_substitute}" <<-EOF
			${title}
			EOF
		)"
    else
        # random title
        title="$(~/bin/new_rand)"
    fi

    case "${m3u8_mode}" in
        (never)
            m3u8=false
            #~ printf 'm3u8 mode disabled.\n'
            ;;
        (always)
            m3u8=true
            #~ printf 'm3u8 mode enabled.\n'
            ;;
        (*) # ask
            if "${help}"
            then
                printf 'The m3u8 mode is useful in case the video is separated in multiple ts files.\n'
                printf 'You may have to tweak the script to get it to work on some websites.\n'
                printf 'Activate m3u8 mode? y/[n] '
            else
                printf 'm3u8 mode? y/[n] '
            fi
            read answer

            case "${answer}" in
                (y|Y)
                    m3u8=true
                    printf 'Enabled.\n'
                    ;;
                (*)
                    m3u8=false
                    printf 'Normal mode.\n'
                    ;;
            esac
    esac

    if "${help}"
    then
        if "${m3u8}"
        then
            printf 'URL of the m3u8 file last downloaded by the browser on the page of the video: '
        else
            printf 'URL of the video file to download: '
        fi
    else 
        printf 'URL: '
    fi

    read url

    if "${m3u8}"
    then
        m3u8_file="$(curl -LsS "${url}")"
        first_ts_url="$(printf '%s' "${m3u8_file}" | grep -m 1 '.ts')"
        last_ts_url="$(printf '%s' "${m3u8_file}" | tail -n 2 | head -n 1)"
        url_start="$(dirname "${last_ts_url}")"

        if [ "${url_start}" = '.' ]
        then
            url_start="$(dirname "${url}")"
        fi

        ext="${url_start##*.}"
        _get_ts_file_index "${first_ts_url}"
        min="${index}"
        _get_ts_file_index "${last_ts_url}"
        max="${index}"
        url_format="${url_start}/${ts_prefix}[${min}-${max}]${url_end}"

        printf 'url_format: “ %s ”\n' "${url_format}"
    else
        ext="${url%%'?'*}"
        ext="${ext##*.}"
        ext="${ext%/}"

        if ! _ext_seems_good
        then
            # try differently
            ext="${url##*.}"
        fi
    fi

    if _ext_seems_good
    then
        # alter default
        default_ext="${ext}"
    fi

    printf "Extension [${default_ext}]: "
    # (type a dash if you want no extension)
    read ext

    case "${ext}" in
        ('')
            ext=".${default_ext}"
            ;;
        (-)
            ext=''
            ;;
        (.*)
            ;;
        (*)
            ext=".${ext}"
            ;;
    esac

    dest="${title}${ext}"

    # handle an already taken filename
    loop1=true
    while "${loop1}" && [ -e "${dest}" ]
    do
        echo "Filename already taken: “${dest}”"
        if "${m3u8}"
        then
            printf '%s' '[g]enerate a new name (default) / [o]verwrite: '
            read answer
            # adapt to alternate prompting branch
            case "${answer}" in
                (r|R|d|D)
                    # set to default
                    answer='g'
                    ;;
                (o|O)
                    answer='r'
                    ;;
            esac
        else
            printf '%s' '[g]enerate a new name (default) / [d]elete / [r]esume: '
            read answer
        fi
        case "${answer}" in
            (d|D)
                # delete
                rm -v "${dest}" || printf '%s\n' "Deletion returned error code ${?}."
                ;;
            (r|R)
                # resume (or, in m3u8 mode, overwrite)
                loop1=false
                ;;
            (*)
                # generate a new name
                original_dest="${dest}"
                title="${title}_"
                i=1
                available=true
                while [ -e "${dest}" ]
                do
                    if [ "${i}" -gt "${max_attempts}" ]
                    then
                        printf 'Failed to find an available name.\n'
                        dest="${original_dest}"
                        available=false
                        break
                    fi
                    title="${title}$(~/bin/new_rand)"
                    dest="${title}${ext}"
                    let 'i++'
                done
                if "${available}"
                then
                    printf 'Using a different filename.\n'
                    loop1=false
                fi
                ;;
        esac
    done

    # last confirmation
    printf 'Target: %s\n' "${dest}"
    printf 'OK? n/[y] '
    read answer

    case "${answer}" in
        (n*|N*)
            ;;
        (*)
            # download
            if "${m3u8}"
            then
                if ! curl -kL "${url_format}" > "${dest}"
                then
                    echo "curl exited with an error." >&2
                    exit 3
                fi
            else
                if ! curl \
                    -k \
                    -L \
                    --continue-at - \
                    --output "${dest}" \
                    "${url}"
                then
                    echo "curl exited with an error." >&2
                    exit 3
                fi
            fi
            title=''
            ;;
    esac
done
