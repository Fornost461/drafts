#!/bin/sh

# watcher - launch video files with some player

## parameters

print_help_at_launch=true
file_browser='spacefm'
video_player='vlc'

dir_root=~/'mnt/Data/Downloads/v'
dir_videos_to_play="${dir_root}/unwatched"

## code

PROGNAME="watcher"
PROGDIR="$(cd "$(dirname "${0}")" && pwd -P)"

# load libraries
. "${PROGDIR}/_utils/load" || { echo "${PROGNAME}: line ${LINENO}: error code ${?} while sourcing “ ${PROGDIR}/_utils/load ”" >&2 ; exit 1; }

# debug mode
no_video=false
[ "${#}" -gt 0 ] && no_video=true

_dir_contains_videos()
{
    ~/bin/dir_not_empty "${dir_videos_to_play}"
}

_question()
{
    printf '“ %s ”. Action ? ' "${file}"
    if "${move_videos}"; then
        if "${moved}"; then
            printf '[n]/y/'
        else
            printf '[y]/n/'
        fi
    else
        printf '[n]/'
    fi
    printf '%s\n' 'q/r/d/p/h'
}

_play_vid()
{
    if ! "${no_video}"; then
        "${video_player}" "${file}" 1>/dev/null 2>&1 & disown
    fi
}

_move_video()
{
    if mkdir -vp "${dir_moved_videos}"; then
        if mv -vi "${file}" "${dir_moved_videos}"; then
            moved=true
            if "${save_count}"; then
                echo "${i}" > "${dir_root}/last"
                save_count=false
            fi
        fi
    else
        echo "${PROGNAME}: an error occurred when attempting to create directory ${dir_moved_videos}" >&2
    fi
}

if _dir_contains_videos; then
    move_videos=true

    i="$(cat "${dir_root}/last")"
    printf '%s ' 'Update count? [y]/n'
    read ans
    case "${ans}" in
        n|N)
            save_count=false
            ;;
        *)
            let 'i++'
            save_count=true
            ;;
    esac

    dir_moved_videos="${dir_root}/${i}"
else
    dir_videos_to_play="${dir_root}"
    move_videos=false
fi

"${print_help_at_launch}" && _usage

keep_looping='true'
while "${keep_looping}"
do
    # launch up to 20 files
    "${PROGDIR}/pick_file" 20 "${dir_videos_to_play}" | while read file
    do
        [ "${file}" = '0_download' ] && continue    # check that file is not a script
        [ -e "${file}" ] || break   # check if user removed file
        dir="$(dirname "${file}")"
        moved=false
        _play_vid
        reask=true
        while "${reask}"
        do
            _question
            read ans < /dev/tty
            case "${ans}" in
                p|P)    # file browser
                    [ -d "${dir}" ] && "${file_browser}" "${dir}" >/dev/null 2>&1 &
                    ;;
                r|R)    # replay
                    _play_vid
                    ;;
                d|D)    # delete file
                    rm -v "${file}" && moved=true
                    ;;
                n|N)    # skip next actions
                    reask=false
                    ;;
                q|Q)    # exit
                    echo 'Quitting.'
                    # exit the subshell of the file-picking loop with code 1 to mean the main script should stop too
                    exit 1
                    ;;
                y|Y)   # move file
                    "${move_videos}" && _move_video
                    ;;
                '')
                    if "${move_videos}" && ! "${moved}"; then
                        _move_video
                    else
                        reask=false
                    fi
                    ;;
                h)    # print help
                    _usage
                    ;;
                *)
                    printf '%s\n' 'Invalid command.'
                    _usage
                    ;;
            esac
        done
    done
    [ "${?}" = 1 ] && keep_looping='false'
    _dir_contains_videos || keep_looping='false'
done
