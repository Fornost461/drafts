#!/bin/sh

# watcher - launch video files with some player

## parameters

print_help_at_launch=true
file_browser='spacefm'
video_player='vlc'

tmsu_data=~/'mnt/Data/Downloads/Transmission'
tmsu_mountpoint=~/'mnt/tmsu'

dir_root=~/'mnt/Data/Downloads/Transmission/v'
dir_videos_to_play="${dir_root}/unwatched"

## code

PROGNAME="watcher"
PROGDIR="$(cd "$(dirname "${0}")" && pwd -P)"

# load libraries
. "${PROGDIR}/_utils/load" || { echo "${PROGNAME}: line ${LINENO}: error code ${?} while sourcing “ ${PROGDIR}/_utils/load ”" >&2 ; exit 1; }

# debug mode
no_video=false
[ "${#}" -gt 0 ] && no_video=true

_dir_contains_videos()
{
    ~/bin/dir_not_empty "${dir_videos_to_play}"
}

_load_list()
{
    if "${move_videos}"
    then
        list="$(find "${dir_videos_to_play}")"
    else
        list="$(find "${dir_videos_to_play}" -mindepth 1 -type f)"
    fi
    list_size="$(wc -l <<-EOF
		${list}
		EOF
	)"
}

_question()
{
    printf '“ %s ”.\n' "${file}"
    tags="$(tmsu tags "${file}")"
    if [ -n "${tags}" ]
    then
        printf 'tags: %s\n' "${tags}"
    fi
    printf 'Action ? '
    if "${move_videos}"; then
        if "${moved}"; then
            printf '[n]/y/'
        else
            printf '[y]/n/'
        fi
    else
        printf '[n]/'
    fi
    printf '%s\n' 'q/r/d/p/t/u/h'
}

_play_vid()
{
    if ! "${no_video}"; then
        "${video_player}" "${file}" 1>/dev/null 2>&1 & disown
    fi
}

_move_video()
{
    if mkdir -vp "${dir_moved_videos}"; then
        if mv -vi "${file}" "${dir_moved_videos}"; then
            moved=true
            new_path="${dir_moved_videos}/$(basename "${file}")"

            # transfer tags
            if ! tmsu repair --manual "${file}" "${new_path}"
            then
                printf "${PROGNAME}: tmsu gave error ${?} after trying to transfer tags from “${file}” to “${new_path}”.\n" >&2
            fi

            file="${new_path}"

            if "${save_count}"
            then
                echo "${folder_number}" > "${dir_root}/last"
                save_count=false
            fi
        fi
    else
        echo "${PROGNAME}: an error occurred when attempting to create directory ${dir_moved_videos}" >&2
    fi
}

mkdir -p "${tmsu_mountpoint}"
cd "${tmsu_data}"
tmsu mount "${tmsu_mountpoint}"

if _dir_contains_videos; then
    move_videos=true

    folder_number="$(cat "${dir_root}/last")"
    printf '%s ' 'Update count? [y]/n'
    read ans
    case "${ans}" in
        (n|N)
            save_count=false
            ;;
        (*)
            let 'folder_number++'
            save_count=true
            ;;
    esac

    dir_moved_videos="${dir_root}/${folder_number}"
else
    dir_videos_to_play="${dir_root}"
    move_videos=false
fi

"${print_help_at_launch}" && _usage

printf 'current tags:\n'
tmsu tags
echo

keep_looping=true
_load_list
while "${keep_looping}"
do
    if [ "${list_size}" -lt 1 ]
    then
        keep_looping=false
        break
    fi
    # pick video
    i="$(~/bin/new_rand 1 "${list_size}")"
    file="$(~/bin/line "${i}" <<-EOF
		${list}
		EOF
	)"
    if ! [ -e "${file}" ]
    then
        _load_list
        continue
    fi
    # remove video from list
    list="$(sed "${i}d" <<-EOF
		${list}
		EOF
	)"
    dir="$(dirname "${file}")"
    moved=false
    _play_vid
    reask=true
    while "${reask}"
    do
        _question
        read ans
        case "${ans}" in
            (p|P)    # file browser
                "${file_browser}" "${dir}" 1>/dev/null 2>&1 & disown
                ;;
            (t|T)    # tag
                printf "tag this video: "
                read ans
                tmsu tag --tags "${ans}" "${file}"
                ;;
            (u|U)    # untag
                printf "untag this video: "
                read ans
                tmsu untag --tags "${ans}" "${file}"
                ;;
            (r|R)    # replay
                _play_vid
                ;;
            (d|D)    # delete file
                rm -v "${file}" && moved=true
                ;;
            (n|N)    # skip next actions
                reask=false
                ;;
            (q|Q)    # exit
                echo 'Quitting.'
                keep_looping=false
                break
                ;;
            (y|Y)   # move file
                "${move_videos}" && _move_video
                ;;
            ('')
                if "${move_videos}" && ! "${moved}"; then
                    _move_video
                else
                    reask=false
                fi
                ;;
            (h)    # print help
                _usage
                ;;
            (*)
                printf '%s\n' 'Invalid command.'
                _usage
                ;;
        esac
    done
done
